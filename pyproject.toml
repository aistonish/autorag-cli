[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

####################
# Project Metadata #
####################

[project]
name = "autorag-cli"
description = "AutoRAG: Unleash On-Premise RAG Integration for Enhanced Business Performance."
readme = "README.md"
requires-python = ">=3.10"
# only license identifier from https://spdx.org/licenses/ are allowed
license = "MIT"

# keywords for easier look-up on PyPI
keywords = ["rag", "ai", "aistonish"]
authors = [{ name = "AIstonish", email = "contact@aistonish.de" }]
# options under https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
]
# direct dependencies of this package, installed when users `pip install autorag` later.
dependencies = [
    "typer==0.9.0",
    "pydantic==2.6.3",
    "psutil==5.9.8",
    "gputil==1.4.0",
    "py-cpuinfo==9.0.0",
    "python-on-whales==0.69.0",
    "srsly==2.4.8",
    "rich==13.7.1",
    "streamlit==1.32.2",
    "watchdog==4.0.0",
]
dynamic = ["version"]

[project.scripts]
autorag = "autorag.cli.app:app"
autorag-cli = "autorag.cli.app:app"
arcli = "autorag.cli.app:app"

[project.urls]
# important URLs for this project
# ToDo
Documentation = "https://github.com/aistonish/autorag"
Source = "https://github.com/aistonish/autorag"
# Tracker = "https://github.com/aistonish/autorag/issues"
# Sponsor = "https://github.com/sponsors/aistonish"

######################
# Build & Versioning #
######################

[tool.hatch.metadata]
# direct dependency references, e.g `pip @ git+https://github.com/pypa/pip.git@master`
allow-direct-references = true

[tool.hatch.version]
source = "vcs"
raw-options = { version_scheme = "no-guess-dev" }

[tool.hatch.build.hooks.vcs]
version-file = "src/autorag/_version.py"

[tool.hatch.build]
packages = ["src/autorag"]

[tool.hatch.build.targets.sdist]
exclude = ["/.github"]

##################
# External Tools #
##################

[tool.mypy]
files = ["src/autorag", "tests"]
disallow_untyped_defs = false
follow_imports = "normal"        # "silent" for not following
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = false
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --doctest-glob='*.md'"
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["src/autorag"]
omit = [
    "_version.py", # automatically created by hatch-vcs, not in repo
]

[tool.coverage.paths]
source = ["src/", "*/site-packages/"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # Have to re-enable the standard pragma
    "pragma: no cover",

    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
target-version = "py310" # ToDo: Modify according to your needs!
line-length = 120
preview = true # preview features & checks, use with caution
extend-select = [ # features in preview
    "W292", # missing-newline-at-end-of-file
]
include = ["src/**/*.py", "src/**/*.pyi", "tests/**/*.py", "tests/**/*.pyi"]
select = [
    "A",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT", # Boolean trap
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "SIM",
    "T",
    "TID",
    "UP",
    "W",
    "YTT",
]
ignore = [
    "RUF100", # Automatically remove unused # noqa directives
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105",
    "S106",
    "S107",
    # Ignore complexity
    "C901",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915",
    "PLC1901", # empty string comparisons
    "PLW2901", # `for` loop variable overwritten
    "SIM114",  # Combine `if` branches using logical `or` operator
    "E203",    # Whitespace before :, needed for black compatability and also `ruff format`
    "ISC001",  # causes unexpected behaviour with formatter
]
unfixable = [
    # "F401",  # Don't touch unused imports
]

[tool.ruff.format]
quote-style = "double"

[tool.ruff.lint]
# select = ["ALL"]

[tool.ruff.lint.pycodestyle]
max-line-length = 120

[tool.ruff.isort]
known-first-party = ["autorag"]

[tool.ruff.flake8-quotes]
inline-quotes = "double"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Allow print/pprint
"examples/*" = ["T201"]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]


#####################
# Environment Setup #
#####################

# Default environment with production dependencies
[tool.hatch.envs.default]
python = "3.10"
post-install-commands = ["pre-commit install"]
dependencies = []

# Test environment with test-only dependencies
[tool.hatch.envs.test]
dependencies = [
    # required test dependencies
    "coverage[toml]>=6.2",
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "pytest-vcr",
    "pytest-sugar",
    # additional test & development dependencies
    # ToDo: Modify according to your needs!
    "hypothesis",
    "jupyterlab",
    "ipython",
    "seaborn",
    "pandas",
]
[tool.hatch.envs.test.scripts]
cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=src/autorag --cov=tests {args}"
no-cov = "cov --no-cov {args}"
debug = "cov --no-cov -s --pdb --pdbcls=IPython.core.debugger:Pdb {args}"

# Docs environment
[tool.hatch.envs.docs]
dependencies = [
    "mkdocs~=1.5",
    "mkdocs-material~=9.4",
    # Plugins
    "mkdocs-include-markdown-plugin",
    "mkdocs-gen-files",
    "mkdocs-literate-nav",
    "mkdocs-minify-plugin~=0.5",
    "mkdocs-section-index",
    "mkdocs-git-revision-date-localized-plugin~=1.1",
    "mkdocstrings[python]",
    "mkdocs-redirects~=1.2",
    "mkdocs-glightbox~=0.3.0",
    "mike~=2.0.0",
    # Extensions
    "pymdown-extensions~=10.5",
    # Necessary for syntax highlighting in code blocks
    "pygments~=2.13",
    # Validation
    "linkchecker~=10.3",
]
[tool.hatch.envs.docs.env-vars]
SOURCE_DATE_EPOCH = "1580601600"
PYTHONUNBUFFERED = "1"
MKDOCS_CONFIG = "mkdocs.yml"
[tool.hatch.envs.docs.scripts]
build = "mkdocs build --config-file {env:MKDOCS_CONFIG} --clean --strict {args}"
serve = "mkdocs serve --config-file {env:MKDOCS_CONFIG} --dev-addr localhost:8000 {args}"
deploy = "mkdocs gh-deploy --config-file {env:MKDOCS_CONFIG}"
# --ignore-url=None since the SUMMARY.md file leaves a <toc>None</toc> in sitemap.xml
validate = "linkchecker --config .linkcheckerrc --ignore-url=/reference --ignore-url=None site"
# https://github.com/linkchecker/linkchecker/issues/678
build-check = ["build", "validate"]

# Lint environment
[tool.hatch.envs.lint]
skip-install = true
dependencies = ["mypy~=1.7", "ruff~=0.1.6"]
[tool.hatch.envs.lint.scripts]
typing = [
    "echo \"VERSION: `mypy --version`\"",
    "mypy --install-types --non-interactive {args}",
]
style = [
    "echo \"VERSION: `ruff --version`\"",
    "ruff {args:.}",
    "ruff format --check {args:.}",
]
fix = [
    "ruff format {args:.}",
    "ruff --fix {args:.}",
    "style",                # feedback on what is not fixable
]
all = ["style", "typing"]

# Test matrix for various Python versions replacing the functionality of tox
[[tool.hatch.envs.py-test.matrix]]
template = ["test"]
python = ["310", "311", "312"]
